AWSTemplateFormatVersion: '2010-09-09'
Description: ESP32 Image Upload with S3, Rekognition, API Gateway, IoT Core, and DynamoDB

Parameters:
  NamePrefix:
    Description: Prefix for resource names
    Type: String
    Default: esp32imagedata
    AllowedPattern: "[a-z0-9]*"

Resources:

  ### S3 Bucket ###
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ '-', [ !Ref NamePrefix, !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      # AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["GET", "HEAD"]
            AllowedOrigins: ["*"]
            MaxAge: 3000

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPublicRead
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*

  ### DynamoDB Table for Rekognition ###
  RekogDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: RekogDatacfm
      AttributeDefinitions:
        - AttributeName: imagename
          AttributeType: S
      KeySchema:
        - AttributeName: imagename
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ### IAM Role for Lambda ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ !Ref NamePrefix, 'LambdaRole' ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowS3AndDynamoAndRekognition
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:aws:s3:::${S3Bucket}/*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt RekogDataTable.Arn
              - Effect: Allow
                Action: rekognition:DetectLabels
                Resource: "*"

  ### Lambda: Upload Function ###
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ '-', [ !Ref NamePrefix, 'uploader' ] ]
      Timeout: 15
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          S3BucketName: !Ref S3Bucket
      Code:
        ZipFile: |
          const { S3Client, PutObjectCommand } = require("@aws-sdk/client-s3");
          const { DynamoDBClient, PutItemCommand } = require("@aws-sdk/client-dynamodb");

          const s3 = new S3Client({ region: "us-east-1" });
          const dynamo = new DynamoDBClient({ region: "us-east-1" });

          exports.handler = async (event) => {
              try {
                  const encodedImage = event.base64Image;
                  const folder = event.S3Folder;
                  const fullFilename = event.Filename;
                  const decodedImage = Buffer.from(encodedImage, 'base64');

                  let baseFilename = fullFilename;
                  let hashes = [];
                  const match = fullFilename.match(/^(.+?)__(.+)$/);
                  if (match) {
                      baseFilename = match[1];
                      hashes = match[2].split("-");
                  } else {
                      baseFilename = fullFilename.replace(/\.jpg$/i, "");
                  }

                  const finalFilename = `${baseFilename}.jpg`;
                  const s3Key = `images/${folder}/${finalFilename}`;

                  await s3.send(new PutObjectCommand({
                      Bucket: process.env.S3BucketName,
                      Key: s3Key,
                      Body: decodedImage,
                      ContentType: "image/jpeg"
                  }));

                  if (hashes.length > 0) {
                      await dynamo.send(new PutItemCommand({
                          TableName: "RekogDatacfm",
                          Item: {
                              imagename: { S: baseFilename },
                              Hashes: { L: hashes.map(h => ({ S: h })) }
                          }
                      }));
                  }

                  return {
                      statusCode: 200,
                      body: JSON.stringify({ message: "Upload complete", filename: finalFilename, hashes }),
                      isBase64Encoded: false
                  };

              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message })
                  };
              }
          };

  ### Lambda: Rekognition Trigger ###
  ImageLabelerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ '-', [ !Ref NamePrefix, 'labeler' ] ]
      Timeout: 15
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          const { RekognitionClient, DetectLabelsCommand } = require("@aws-sdk/client-rekognition");
          const { DynamoDBClient, UpdateItemCommand } = require("@aws-sdk/client-dynamodb");

          const rekognitionClient = new RekognitionClient({ region: "us-east-1" });
          const dynamoClient = new DynamoDBClient({ region: "us-east-1" });

          exports.handler = async (event) => {
              try {
                  const bucket = event.Records[0].s3.bucket.name;
                  const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
                  const filenameOnly = key.split('/').pop().replace(/\.(jpg|jpeg|png)$/i, '');

                  const detectResult = await rekognitionClient.send(new DetectLabelsCommand({
                      Image: { S3Object: { Bucket: bucket, Name: key } },
                      MaxLabels: 10,
                      MinConfidence: 70
                  }));

                  const labelItems = detectResult.Labels.map(label => ({
                      M: {
                          Name: { S: label.Name },
                          Confidence: { N: label.Confidence.toString() }
                      }
                  }));

                  await dynamoClient.send(new UpdateItemCommand({
                      TableName: "RekogDatacfm",
                      Key: { imagename: { S: filenameOnly } },
                      UpdateExpression: "SET Labels = :labels, #ts = :ts",
                      ExpressionAttributeNames: { "#ts": "Timestamp" },
                      ExpressionAttributeValues: {
                          ":labels": { L: labelItems },
                          ":ts": { S: new Date().toISOString() }
                      }
                  }));

                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          message: "Labels updated successfully",
                          file: filenameOnly,
                          labels: detectResult.Labels
                      })
                  };

              } catch (err) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: err.message })
                  };
              }
          };

  # ### S3 Trigger and Permissions ###
  # S3BucketNotification:
  #   Type: AWS::S3::BucketNotification
  #   DependsOn: [ ImageLabelerFunction ]
  #   Properties:
  #     Bucket: !Ref S3Bucket
  #     NotificationConfiguration:
  #       LambdaConfigurations:
  #         - Event: s3:ObjectCreated:Put
  #           Filter:
  #             S3Key:
  #               Rules:
  #                 - Name: suffix
  #                   Value: .jpg
  #           Function: !GetAtt ImageLabelerFunction.Arn

  AllowS3InvokeImageLabeler:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ImageLabelerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${S3Bucket}

  ### API Gateway for Upload ###
  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join [ '-', [ !Ref NamePrefix, 'api' ] ]
      BinaryMediaTypes: [ 'image/jpg' ]
      EndpointConfiguration:
        Types: [ 'REGIONAL' ]

  APIFolderResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt [ RestAPI, RootResourceId ]
      PathPart: '{folder}'

  APIEpochResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !Ref APIFolderResource
      PathPart: '{epoch}'

  APIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref APIEpochResource
      AuthorizationType: NONE
      HttpMethod: POST
      MethodResponses:
        - StatusCode: 200
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        PassthroughBehavior: WHEN_NO_TEMPLATES
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
        RequestTemplates:
          "image/jpg": |
            {
              "S3Folder" : "$input.params('folder')",
              "Filename" : "$input.params('epoch')",
              "base64Image" : "$input.body"
            }

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [ APIMethod ]
    Properties:
      RestApiId: !Ref RestAPI

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref RestAPI
      DeploymentId: !Ref ApiGatewayDeployment

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*/POST/*/*

  ### IoT Core Thing ###
  IotThing:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: !Join [ '-', [ !Ref NamePrefix, 'thing' ] ]

  ### IoT Policy for Thing ###
  IotPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Join [ '-', [ !Ref NamePrefix, 'iot-policy' ] ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"

  ### DynamoDB Table for Sensor Data ###
  Esp32SensorDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: esp32sensordatacfm
      AttributeDefinitions:
        - AttributeName: imagename
          AttributeType: S
      KeySchema:
        - AttributeName: imagename
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ### IAM Role for IoT Rule ###
  IotRuleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ !Ref NamePrefix, 'iot-rule-role' ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "dynamodb:PutItem"
                Resource: !GetAtt Esp32SensorDataTable.Arn

  ### IoT Rule ###
  IotRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Join [ '_', [ !Ref NamePrefix, 'iotrule' ] ]
      TopicRulePayload:
        RuleDisabled: false
        Sql: "SELECT * FROM 'esp32/+'"
        Actions:
          - DynamoDBv2:
              RoleArn: !GetAtt IotRuleRole.Arn
              PutItem:
                TableName: !Ref Esp32SensorDataTable

Outputs:
  S3Bucket:
    Description: Public image bucket
    Value: !Ref S3Bucket
  RekogDataTable:
    Description: DynamoDB table
    Value: !Ref RekogDataTable
  Esp32SensorDataTable:
    Description: Sensor data table
    Value: !Ref Esp32SensorDataTable
  UploaderLambda:
    Description: Lambda for uploading
    Value: !Ref LambdaFunction
  LabelerLambda:
    Description: Lambda for Rekognition
    Value: !Ref ImageLabelerFunction
  APIGatewayURL:
    Description: API Gateway URL
    Value: !Join [ '', [ 'https://', !Ref RestAPI, '.execute-api.', !Ref AWS::Region, '.amazonaws.com/', !Ref ApiGatewayStage, '/' ] ]
  IoTThing:
    Description: IoT Thing for ESP32
    Value: !Ref IotThing